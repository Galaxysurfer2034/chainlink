// Inspired from https://github.com/arcadeum/multi-token-standard/blob/master/src/tests/utils/contract.ts
// Build ethers.Contract instances from ABI JSON files generated by truffle.
//
// adapted this utility from the handy work by the counterfactual team at:
// https://github.com/counterfactual/monorepo/blob/d9be8524a691c45b6aac1b5e1cf2ff81059203df/packages/contracts/utils/contract.ts

import * as ethers from 'ethers'
import { makeDebug } from './debug'
const debug = makeDebug('abstractContract')

interface BuildArtifact {
  readonly contractName?: string
  readonly abi: any[]
  readonly bytecode: string
}

/**
 * Convenience class for an undeployed contract i.e. only the ABI and bytecode.
 */
export class AbstractContract {
  /**
   * Load build artifact by name into an abstract contract
   * @example
   *  const CountingApp = AbstractContract.fromArtifactName("CountingApp", { StaticCall })
   * @param artifactName The name of the artifact to load
   */
  public static fromArtifactName(artifactName: string): AbstractContract {
    // these ABI JSON files are generated by truffle
    const contract: BuildArtifact = require(`../../build/contracts/${artifactName}.json`)
    return AbstractContract.fromBuildArtifact(contract, artifactName)
  }

  /**
   * Wrap build artifact in abstract contract
   * @param buildArtifact Truffle contract to wrap
   */
  public static fromBuildArtifact(
    buildArtifact: BuildArtifact,
    artifactName = 'UntitledContract',
  ): AbstractContract {
    return new AbstractContract(
      buildArtifact.abi,
      buildArtifact.bytecode,
      artifactName,
    )
  }

  public static async getNetworkID(wallet: ethers.Wallet): Promise<number> {
    return wallet.provider.getNetwork().then(n => n.chainId)
  }

  /**
   * @param abi ABI of the abstract contract
   * @param bytecode Binary of the abstract contract
   * @param contractName
   */
  constructor(
    readonly abi: any[],
    readonly bytecode: string,
    readonly contractName?: string,
  ) {}

  public toStatic(): AbstractContract {
    debug('abi: %o, %s', this.abi, typeof this.abi)
    this.abi.forEach(m => {
      if (m.constant == null) {
        throw Error(
          'Unknown ABI schema, expected function object with "constant" key',
        )
      }
      m.constant = true
    })

    return this
  }

  /**
   * Deploy new instance of contract
   * @param wallet Wallet (with provider) to use for contract calls
   * @param args Optional arguments to pass to contract constructor
   */
  public async deploy<T>(wallet: ethers.Wallet, args: any[] = []): Promise<T> {
    const contractFactory = this.getContractFactory().connect(wallet)

    const contract = await contractFactory.deploy(...args)
    return (contract as any) as T
  }

  public getContractFactory(): ethers.ContractFactory {
    const contractFactory = new ethers.ContractFactory(this.abi, this.bytecode)

    return contractFactory
  }
}
