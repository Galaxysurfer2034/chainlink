#!/usr/bin/env node

(async () => {
  // imports
  const fs = require('fs')
  const path = require('path')
  const { exec } = require('child_process')
  const sh = require("shelljs")
  const ethers = require('ethers')

  // ensure correct CLI ussage
  if (process.argv.length < 3) {
    console.error('Usage: ./deployer <solidity contract> <constructor args...>')
    process.exit(1)
  }

  const relativeFilePath = process.argv[2]
  const args = process.argv.slice(3)
  const filePath = path.resolve(sh.pwd().stdout, relativeFilePath)
  const evmDir = path.resolve(__dirname, "../")
  const contractName = path.basename(filePath, ".sol")
  const buildFile = path.join(evmDir, "build/contracts", `${contractName}.json`)

  // ensure file exists
  if (!fs.existsSync(filePath)) {
    console.error(`cannot find contract ${filePath}`)
    process.exit(1)
  }

  // ensure yarn exists

  // run truffle compile in /evm directory
  console.log("compiling contracts...\n")
  const child = exec(`cd ${evmDir} && yarn run truffle compile`)
  child.stderr.on('data', console.log)
  await new Promise(res => {
    child.on('exit', status => {
      status === 0 ? res() : exit(status)
    })
  })

  // Setup JSON RPC provider
  const providerURL = process.env['ETH_HTTP_URL'] || 'http://localhost:18545'
  const provider = new ethers.providers.JsonRpcProvider(providerURL)

  // setup deployer wallet
  const privateKey =
    process.env['PRIVATE_KEY'] ||
    '4d6cf3ce1ac71e79aa33cf481dedf2e73acb548b1294a70447c960784302d2fb'
  const wallet = new ethers.Wallet(privateKey, provider)

  // deploy
  console.log(`deploying ${contractName} contract...\n`)
  const { abi, bytecode } = require(buildFile)
  const contractFactory = new ethers.ContractFactory(abi, bytecode, wallet)
  try {
    const contract = await contractFactory.deploy(...args)
    console.log(`${contractName} contract successfully deployed at: ${contract.address}`)
  } catch (error) {
    console.error(error.stack)
    process.exit(1)
  }
})()
