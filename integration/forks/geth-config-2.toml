[Eth]
NetworkId = 17
SyncMode = "full"
NoPruning = false
NoPrefetch = false
LightPeers = 100
OnlyAnnounce = false
DatabaseCache = 2048
TrieCleanCache = 1024
TrieDirtyCache = 1024
TrieTimeout = 3600000000000
EnablePreimageRecording = false
EWASMInterpreter = ""
EVMInterpreter = ""

[Eth.Miner]
GasFloor = 8000000
GasCeil = 8000000
GasPrice = 1000000000
Recommit = 3000000000
Noverify = false

[Eth.Ethash]
CacheDir = "ethash"
CachesInMem = 2
CachesOnDisk = 3
DatasetDir = "/root/.ethash"
DatasetsInMem = 1
DatasetsOnDisk = 2
PowMode = 0

[Eth.TxPool]
Locals = []
NoLocals = false
Journal = "transactions.rlp"
Rejournal = 3600000000000
PriceLimit = 1
PriceBump = 10
AccountSlots = 16
GlobalSlots = 4096
AccountQueue = 64
GlobalQueue = 1024
Lifetime = 10800000000000

[Eth.GPO]
Blocks = 20
Percentile = 60

[Shh]
MaxMessageSize = 1048576
MinimumAcceptedPOW = 2e-01
RestrictConnectionBetweenLightClients = true

[Node]
# Fill this in with the path to the datadir and keystore *in the container*
DataDir = "/root/gethnet/datadir2"
KeyStoreDir = "/root/gethnet/datadir2/keystore"
InsecureUnlockAllowed = true
# It is necessary to interact with geth2 via docker, because we want to inject
# the transaction while it's disconnected from the network. That means HTTPHost
# has to listen on localhost.
HTTPHost = "localhost"
HTTPPort = 8545
HTTPModules = ["net", "web3", "eth", "shh"]
GraphQLPort = 8547

[Node.P2P]
MaxPeers = 50
NoDiscovery = false
BootstrapNodes = []
BootstrapNodesV5 = []
# Fill StaticNodes in with the enode addresses for the other nodes of the
# private network
StaticNodes = ["enode://84d6781578958e4c3bf02a889651700c42b5928717d25df1c639deb40afbcd21e0bfc3df5fff8952dc5f69424174d934ade93ded5cddf95a99b98a94eb0b83ec@172.16.1.100:30303"]
TrustedNodes = []
ListenAddr = ":30303"
EnableMsgEvents = false

[Node.HTTPTimeouts]
ReadTimeout = 30000000000
WriteTimeout = 30000000000
IdleTimeout = 120000000000

[Dashboard]
Host = "localhost"
Port = 8080
Refresh = 5000000000
