// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	forwarders "github.com/smartcontractkit/chainlink/core/chains/evm/forwarders"
	mock "github.com/stretchr/testify/mock"

	pg "github.com/smartcontractkit/chainlink/core/services/pg"

	utils "github.com/smartcontractkit/chainlink/core/utils"
)

// ORM is an autogenerated mock type for the ORM type
type ORM struct {
	mock.Mock
}

// CreateForwarder provides a mock function with given fields: addr, evmChainId, qopts
func (_m *ORM) CreateForwarder(addr common.Address, evmChainId utils.Big, qopts ...pg.QOpt) (forwarders.EVMForwarder, error) {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, addr, evmChainId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 forwarders.EVMForwarder
	if rf, ok := ret.Get(0).(func(common.Address, utils.Big, ...pg.QOpt) forwarders.EVMForwarder); ok {
		r0 = rf(addr, evmChainId, qopts...)
	} else {
		r0 = ret.Get(0).(forwarders.EVMForwarder)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, utils.Big, ...pg.QOpt) error); ok {
		r1 = rf(addr, evmChainId, qopts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteForwarder provides a mock function with given fields: id, qopts
func (_m *ORM) DeleteForwarder(id int32, qopts ...pg.QOpt) error {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(int32, ...pg.QOpt) error); ok {
		r0 = rf(id, qopts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindForwarders provides a mock function with given fields: offset, limit
func (_m *ORM) FindForwarders(offset int, limit int) ([]forwarders.EVMForwarder, int, error) {
	ret := _m.Called(offset, limit)

	var r0 []forwarders.EVMForwarder
	if rf, ok := ret.Get(0).(func(int, int) []forwarders.EVMForwarder); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]forwarders.EVMForwarder)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(offset, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
