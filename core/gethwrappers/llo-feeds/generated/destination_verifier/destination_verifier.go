// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package destination_verifier

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type CommonAddressAndWeight struct {
	Addr   common.Address
	Weight uint64
}

var DestinationVerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifierProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadVerification\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes24\",\"name\":\"DONConfigID\",\"type\":\"bytes24\"}],\"name\":\"DONConfigAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DONConfigDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numSigners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSigners\",\"type\":\"uint256\"}],\"name\":\"ExcessSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FaultToleranceMustBePositive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeManagerInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numSigners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSigners\",\"type\":\"uint256\"}],\"name\":\"InsufficientSigners\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ssLength\",\"type\":\"uint256\"}],\"name\":\"MismatchedSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonUniqueSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VerifierProxyInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAccessController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessController\",\"type\":\"address\"}],\"name\":\"AccessControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes24\",\"name\":\"DONConfigID\",\"type\":\"bytes24\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"ConfigActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes24\",\"name\":\"DONConfigID\",\"type\":\"bytes24\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structCommon.AddressAndWeight[]\",\"name\":\"recipientAddressesAndWeights\",\"type\":\"tuple[]\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFeeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeManager\",\"type\":\"address\"}],\"name\":\"FeeManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"feedId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"ReportVerified\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccessController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_verifierProxy\",\"outputs\":[{\"internalType\":\"contractIDestinationVerifierProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessController\",\"type\":\"address\"}],\"name\":\"setAccessController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"}],\"internalType\":\"structCommon.AddressAndWeight[]\",\"name\":\"recipientAddressesAndWeights\",\"type\":\"tuple[]\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DONConfigIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"setConfigActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeManager\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signedReport\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"parameterPayload\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"signedReports\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"parameterPayload\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"verifyBulk\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b5060405162003252380380620032528339810160408190526200003491620001a6565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be81620000fb565b5050506001600160a01b038116620000e95760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0316608052620001d8565b336001600160a01b03821603620001555760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b600060208284031215620001b957600080fd5b81516001600160a01b0381168114620001d157600080fd5b9392505050565b60805161305062000202600039600081816102790152818161058b015261131801526130506000f3fe6080604052600436106100dd5760003560e01c806379ba50971161007f578063d7c72e4e11610059578063d7c72e4e1461029b578063f08391d8146102bb578063f2d63826146102db578063f2fde38b1461030657600080fd5b806379ba5097146102275780638da5cb5b1461023c578063b97455c71461026757600080fd5b8063294d2bb1116100bb578063294d2bb1146101b2578063453ec61b146101c5578063472d35b9146101e75780635ad72fae1461020757600080fd5b806301ffc9a7146100e257806316d6b5f614610117578063181f5a7714610163575b600080fd5b3480156100ee57600080fd5b506101026100fd366004612195565b610326565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b5060055473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010e565b34801561016f57600080fd5b5060408051808201909152601981527f44657374696e6174696f6e566572696669657220312e302e300000000000000060208201525b60405161010e9190612242565b6101a56101c03660046122c7565b610587565b3480156101d157600080fd5b506101e56101e03660046124f4565b6107f3565b005b3480156101f357600080fd5b506101e56102023660046125c7565b610e20565b34801561021357600080fd5b506101e56102223660046125f0565b611101565b34801561023357600080fd5b506101e5611217565b34801561024857600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff1661013e565b34801561027357600080fd5b5061013e7f000000000000000000000000000000000000000000000000000000000000000081565b6102ae6102a9366004612620565b611314565b60405161010e91906126a3565b3480156102c757600080fd5b506101e56102d63660046125c7565b611627565b3480156102e757600080fd5b5060045473ffffffffffffffffffffffffffffffffffffffff1661013e565b34801561031257600080fd5b506101e56103213660046125c7565b6116ae565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f294d2bb10000000000000000000000000000000000000000000000000000000014806103b957507fffffffff0000000000000000000000000000000000000000000000000000000082167fd7c72e4e00000000000000000000000000000000000000000000000000000000145b8061040557507fffffffff0000000000000000000000000000000000000000000000000000000082167f16d6b5f600000000000000000000000000000000000000000000000000000000145b8061045157507fffffffff0000000000000000000000000000000000000000000000000000000082167ff2d6382600000000000000000000000000000000000000000000000000000000145b8061049d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f453ec61b00000000000000000000000000000000000000000000000000000000145b806104e957507fffffffff0000000000000000000000000000000000000000000000000000000082167f472d35b900000000000000000000000000000000000000000000000000000000145b8061053557507fffffffff0000000000000000000000000000000000000000000000000000000082167ff08391d800000000000000000000000000000000000000000000000000000000145b8061058157507fffffffff0000000000000000000000000000000000000000000000000000000082167f5ad72fae00000000000000000000000000000000000000000000000000000000145b92915050565b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633146105f8576040517fef67f5d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554829073ffffffffffffffffffffffffffffffffffffffff1680158015906106b757506040517f6b14daf800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690636b14daf890610674908590600090369060040161276c565b602060405180830381865afa158015610691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b591906127a5565b155b156106ee576040517fef67f5d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806106fc8a8a886116c2565b600454919350915073ffffffffffffffffffffffffffffffffffffffff16156107e657600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386968cfd34838d8d8d8d8d6040518863ffffffff1660e01b8152600401610785969594939291906127c2565b6000604051808303818588803b15801561079e57600080fd5b505af1935050505080156107b0575060015b6107e6576040517f4df18f0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5098975050505050505050565b82518260ff1680600003610833576040517f0743bae600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601f82111561087d576040517f61750f4000000000000000000000000000000000000000000000000000000000815260048101839052601f60248201526044015b60405180910390fd5b610888816003612848565b82116108e0578161089a826003612848565b6108a590600161285f565b6040517f9dd9e6d800000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610874565b6108e8611bc7565b6108f185611c4a565b15610928576040517ff67bc7c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109418560006001885161093c9190612872565b611cf9565b60008585604051602001610956929190612885565b60405160208183030381529060405280519060200120905060005b8651811015610afd57600073ffffffffffffffffffffffffffffffffffffffff168782815181106109a4576109a46128fd565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16036109f9576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160026000898481518110610a1157610a116128fd565b602002602001015185604051602001610a7d92919060609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001682527fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000166014820152602c0190565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815291815281516020928301208352908201929092520160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055610af68161292c565b9050610971565b5060035415801590610b825750600380547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000083169190610b3f90600190612872565b81548110610b4f57610b4f6128fd565b60009182526020909120015460401b7fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016145b15610bdd576040517f9a92755c0000000000000000000000000000000000000000000000000000000081527fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000082166004820152602401610874565b835115610c6e57600480546040517ff65df96200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169163f65df96291610c3b9185918991016129ca565b600060405180830381600087803b158015610c5557600080fd5b505af1158015610c69573d6000803e3d6000fd5b505050505b604080516080810182527fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000831680825260ff80891660208401908152600184860181815263ffffffff4281166060880190815260038054948501815560005296517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90930180549451925197519091167a010000000000000000000000000000000000000000000000000000027fffff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffff97151579010000000000000000000000000000000000000000000000000002979097167fffff0000000000ffffffffffffffffffffffffffffffffffffffffffffffffff929095167801000000000000000000000000000000000000000000000000027fffffffffffffff0000000000000000000000000000000000000000000000000090941692881c929092179290921791909116919091179290921790915590517f2d763a674a99583454a287d792819ffb9ff7e791c23e7745a082701136ce336c90610e1090899089908990612a0d565b60405180910390a2505050505050565b610e28611bc7565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f86968cfd00000000000000000000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff8216906301ffc9a790602401602060405180830381865afa158015610eb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed691906127a5565b1580610f8d57506040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f3690750900000000000000000000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff8216906301ffc9a790602401602060405180830381865afa158015610f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8b91906127a5565b155b8061104357506040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527ff65df96200000000000000000000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff8216906301ffc9a790602401602060405180830381865afa15801561101d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104191906127a5565b155b1561107a576040517f8238941900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6004805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f04628abcaa6b1674651352125cb94b65b289145bc2bc4d67720bb7d966372f0391015b60405180910390a15050565b611109611bc7565b6003548210611144576040517f59d7257e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060038381548110611159576111596128fd565b600091825260209182902001805484151579010000000000000000000000000000000000000000000000000081027fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff909216919091178083556040805191811b7fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000168252938101919091529092507f90186a1e77b498ec417ea88bd026cae00d7043c357cc45221777623bda582dd4910160405180910390a1505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611298576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e6572000000000000000000006044820152606401610874565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314611385576040517fef67f5d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554829073ffffffffffffffffffffffffffffffffffffffff16801580159061144457506040517f6b14daf800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690636b14daf890611401908590600090369060040161276c565b602060405180830381865afa15801561141e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144291906127a5565b155b1561147b576040517fef67f5d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008767ffffffffffffffff81111561149657611496612348565b6040519080825280602002602001820160405280156114c957816020015b60608152602001906001900390816114b45790505b50905060008867ffffffffffffffff8111156114e7576114e7612348565b604051908082528060200260200182016040528015611510578160200160208202803683370190505b50905060005b898110156115a25760008061154e8d8d85818110611536576115366128fd565b90506020028101906115489190612a84565b8b6116c2565b9150915081858481518110611565576115656128fd565b602002602001018190525080848481518110611583576115836128fd565b60200260200101818152505050508061159b9061292c565b9050611516565b5060045473ffffffffffffffffffffffffffffffffffffffff16156107e657600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633690750934838d8d8d8d8d6040518863ffffffff1660e01b815260040161078596959493929190612ae9565b61162f611bc7565b6005805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f953e92b1a6442e9c3242531154a3f6f6eb00b4e9c719ba8118fa6235e4ce89b691016110f5565b6116b6611bc7565b6116bf81611ee9565b50565b6060600080808080806116d7898b018b612d10565b94509450945094509450815183511461172957825182516040517ff0d3140800000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610874565b8251600003611764576040517fc7af40f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848051906020012086604051602001611780929190612deb565b6040516020818303038152906040528051906020012090506000845167ffffffffffffffff8111156117b4576117b4612348565b6040519080825280602002602001820160405280156117dd578160200160208202803683370190505b50905060005b85518110156118eb57600183858360208110611801576118016128fd565b61180e91901a601b612e27565b888481518110611820576118206128fd565b602002602001015188858151811061183a5761183a6128fd565b602002602001015160405160008152602001604052604051611878949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa15801561189a573d6000803e3d6000fd5b505050602060405103518282815181106118b6576118b66128fd565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526118e48161292c565b90506117e3565b506118f581611c4a565b1561192c576040517f4df18f0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061193787611fde565b9050600061194482612004565b80519091507fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000166119a1576040517f4df18f0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80604001516119dc576040517f4df18f0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806020015160ff16835111611a1d576040517f4df18f0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805b8451811015611b3b57848181518110611a3c57611a3c6128fd565b60200260200101518360000151604051602001611aac92919060609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001682527fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000166014820152602c0190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600290935291205490925060ff16611b2b576040517f4df18f0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611b348161292c565b9050611a21565b50611b4589612e40565b60405173ffffffffffffffffffffffffffffffffffffffff8f1681527f58ca9502e98a536e06e72d680fcc251e5d10b72291a281665a2c2dc0ac30fcc59060200160405180910390a25051969d7fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009097169c50959a5050505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611c48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610874565b565b6000805b8251811015611cf0576000611c6482600161285f565b90505b8351811015611ce757838181518110611c8257611c826128fd565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16848381518110611cb257611cb26128fd565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603611cdf575060019392505050565b600101611c67565b50600101611c4e565b50600092915050565b8181808203611d09575050505050565b6000856002611d188787612e85565b611d229190612ea5565b611d2c9087612f34565b81518110611d3c57611d3c6128fd565b602002602001015190505b818313611ebb575b8073ffffffffffffffffffffffffffffffffffffffff16868481518110611d7857611d786128fd565b602002602001015173ffffffffffffffffffffffffffffffffffffffff161015611dae5782611da681612f5c565b935050611d4f565b858281518110611dc057611dc06128fd565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161015611e0d5781611e0581612f8d565b925050611dae565b818313611eb657858281518110611e2657611e266128fd565b6020026020010151868481518110611e4057611e406128fd565b6020026020010151878581518110611e5a57611e5a6128fd565b60200260200101888581518110611e7357611e736128fd565b73ffffffffffffffffffffffffffffffffffffffff93841660209182029290920101529116905282611ea481612f5c565b9350508180611eb290612f8d565b9250505b611d47565b81851215611ece57611ece868684611cf9565b83831215611ee157611ee1868486611cf9565b505050505050565b3373ffffffffffffffffffffffffffffffffffffffff821603611f68576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610874565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60008082806020019051810190611ff59190612ff8565b63ffffffff1695945050505050565b60408051608081018252600080825260208201819052918101829052606081019190915260408051608081018252600080825260208201819052918101829052606081019190915260035460009061205e90600190612872565b90505b8360038281548110612075576120756128fd565b6000918252602090912001547a010000000000000000000000000000000000000000000000000000900463ffffffff16101561217e57600381815481106120be576120be6128fd565b600091825260209182902060408051608081018252929091015480821b7fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001683527801000000000000000000000000000000000000000000000000810460ff9081169484019490945279010000000000000000000000000000000000000000000000000081049093161515908201527a01000000000000000000000000000000000000000000000000000090910463ffffffff166060820152915061218e565b61218781613034565b9050612061565b5092915050565b6000602082840312156121a757600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146121d757600080fd5b9392505050565b6000815180845260005b81811015612204576020818501810151868301820152016121e8565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6020815260006121d760208301846121de565b60008083601f84011261226757600080fd5b50813567ffffffffffffffff81111561227f57600080fd5b60208301915083602082850101111561229757600080fd5b9250929050565b803573ffffffffffffffffffffffffffffffffffffffff811681146122c257600080fd5b919050565b6000806000806000606086880312156122df57600080fd5b853567ffffffffffffffff808211156122f757600080fd5b61230389838a01612255565b9097509550602088013591508082111561231c57600080fd5b5061232988828901612255565b909450925061233c90506040870161229e565b90509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561239a5761239a612348565b60405290565b6040516060810167ffffffffffffffff8111828210171561239a5761239a612348565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561240a5761240a612348565b604052919050565b600067ffffffffffffffff82111561242c5761242c612348565b5060051b60200190565b803560ff811681146122c257600080fd5b600082601f83011261245857600080fd5b8135602061246d61246883612412565b6123c3565b82815260069290921b8401810191818101908684111561248c57600080fd5b8286015b848110156124e957604081890312156124a95760008081fd5b6124b1612377565b6124ba8261229e565b81528482013567ffffffffffffffff811681146124d75760008081fd5b81860152835291830191604001612490565b509695505050505050565b60008060006060848603121561250957600080fd5b833567ffffffffffffffff8082111561252157600080fd5b818601915086601f83011261253557600080fd5b8135602061254561246883612412565b82815260059290921b8401810191818101908a84111561256457600080fd5b948201945b838610156125895761257a8661229e565b82529482019490820190612569565b97506125989050888201612436565b9550505060408601359150808211156125b057600080fd5b506125bd86828701612447565b9150509250925092565b6000602082840312156125d957600080fd5b6121d78261229e565b80151581146116bf57600080fd5b6000806040838503121561260357600080fd5b823591506020830135612615816125e2565b809150509250929050565b60008060008060006060868803121561263857600080fd5b853567ffffffffffffffff8082111561265057600080fd5b818801915088601f83011261266457600080fd5b81358181111561267357600080fd5b8960208260051b850101111561268857600080fd5b60209283019750955090870135908082111561231c57600080fd5b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612716577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526127048583516121de565b945092850192908501906001016126ca565b5092979650505050505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b73ffffffffffffffffffffffffffffffffffffffff8416815260406020820152600061279c604083018486612723565b95945050505050565b6000602082840312156127b757600080fd5b81516121d7816125e2565b8681526080602082015260006127dc608083018789612723565b82810360408401526127ef818688612723565b91505073ffffffffffffffffffffffffffffffffffffffff83166060830152979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761058157610581612819565b8082018082111561058157610581612819565b8181038181111561058157610581612819565b825160009082906020808701845b838110156128c557815173ffffffffffffffffffffffffffffffffffffffff1685529382019390820190600101612893565b5050505060f89390931b7fff000000000000000000000000000000000000000000000000000000000000001683525050600101919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361295d5761295d612819565b5060010190565b600081518084526020808501945080840160005b838110156129bf578151805173ffffffffffffffffffffffffffffffffffffffff16885283015167ffffffffffffffff168388015260409096019590820190600101612978565b509495945050505050565b7fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000083168152604060208201526000612a056040830184612964565b949350505050565b606080825284519082018190526000906020906080840190828801845b82811015612a5c57815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101612a2a565b50505060ff8616828501528381036040850152612a798186612964565b979650505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612ab957600080fd5b83018035915067ffffffffffffffff821115612ad457600080fd5b60200191503681900382131561229757600080fd5b6080808252875190820181905260009060209060a0840190828b01845b82811015612b2257815184529284019290840190600101612b06565b50505083810382850152878152818101600589901b820183018a60005b8b811015612bea577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe085840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18e3603018112612ba057600080fd5b8d01868101903567ffffffffffffffff811115612bbc57600080fd5b803603821315612bcb57600080fd5b612bd6858284612723565b958801959450505090850190600101612b3f565b50508581036040870152612bff81898b612723565b945050505050612a79606083018473ffffffffffffffffffffffffffffffffffffffff169052565b600082601f830112612c3857600080fd5b813567ffffffffffffffff811115612c5257612c52612348565b612c8360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016123c3565b818152846020838601011115612c9857600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112612cc657600080fd5b81356020612cd661246883612412565b82815260059290921b84018101918181019086841115612cf557600080fd5b8286015b848110156124e95780358352918301918301612cf9565b600080600080600060e08688031215612d2857600080fd5b86601f870112612d3757600080fd5b612d3f6123a0565b806060880189811115612d5157600080fd5b885b81811015612d6b578035845260209384019301612d53565b5090965035905067ffffffffffffffff80821115612d8857600080fd5b612d9489838a01612c27565b95506080880135915080821115612daa57600080fd5b612db689838a01612cb5565b945060a0880135915080821115612dcc57600080fd5b50612dd988828901612cb5565b9598949750929560c001359392505050565b828152600060208083018460005b6003811015612e1657815183529183019190830190600101612df9565b505050506080820190509392505050565b60ff818116838216019081111561058157610581612819565b80516020808301519190811015612e7f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160200360031b1b821691505b50919050565b818103600083128015838313168383128216171561218e5761218e612819565b600082612edb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f800000000000000000000000000000000000000000000000000000000000000083141615612f2f57612f2f612819565b500590565b8082018281126000831280158216821582161715612f5457612f54612819565b505092915050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361295d5761295d612819565b60007f80000000000000000000000000000000000000000000000000000000000000008203612fbe57612fbe612819565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b805163ffffffff811681146122c257600080fd5b60008060006060848603121561300d57600080fd5b8351925061301d60208501612fe4565b915061302b60408501612fe4565b90509250925092565b600081612fbe57612fbe61281956fea164736f6c6343000813000a",
}

var DestinationVerifierABI = DestinationVerifierMetaData.ABI

var DestinationVerifierBin = DestinationVerifierMetaData.Bin

func DeployDestinationVerifier(auth *bind.TransactOpts, backend bind.ContractBackend, verifierProxy common.Address) (common.Address, *types.Transaction, *DestinationVerifier, error) {
	parsed, err := DestinationVerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DestinationVerifierBin), backend, verifierProxy)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DestinationVerifier{address: address, abi: *parsed, DestinationVerifierCaller: DestinationVerifierCaller{contract: contract}, DestinationVerifierTransactor: DestinationVerifierTransactor{contract: contract}, DestinationVerifierFilterer: DestinationVerifierFilterer{contract: contract}}, nil
}

type DestinationVerifier struct {
	address common.Address
	abi     abi.ABI
	DestinationVerifierCaller
	DestinationVerifierTransactor
	DestinationVerifierFilterer
}

type DestinationVerifierCaller struct {
	contract *bind.BoundContract
}

type DestinationVerifierTransactor struct {
	contract *bind.BoundContract
}

type DestinationVerifierFilterer struct {
	contract *bind.BoundContract
}

type DestinationVerifierSession struct {
	Contract     *DestinationVerifier
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type DestinationVerifierCallerSession struct {
	Contract *DestinationVerifierCaller
	CallOpts bind.CallOpts
}

type DestinationVerifierTransactorSession struct {
	Contract     *DestinationVerifierTransactor
	TransactOpts bind.TransactOpts
}

type DestinationVerifierRaw struct {
	Contract *DestinationVerifier
}

type DestinationVerifierCallerRaw struct {
	Contract *DestinationVerifierCaller
}

type DestinationVerifierTransactorRaw struct {
	Contract *DestinationVerifierTransactor
}

func NewDestinationVerifier(address common.Address, backend bind.ContractBackend) (*DestinationVerifier, error) {
	abi, err := abi.JSON(strings.NewReader(DestinationVerifierABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindDestinationVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DestinationVerifier{address: address, abi: abi, DestinationVerifierCaller: DestinationVerifierCaller{contract: contract}, DestinationVerifierTransactor: DestinationVerifierTransactor{contract: contract}, DestinationVerifierFilterer: DestinationVerifierFilterer{contract: contract}}, nil
}

func NewDestinationVerifierCaller(address common.Address, caller bind.ContractCaller) (*DestinationVerifierCaller, error) {
	contract, err := bindDestinationVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DestinationVerifierCaller{contract: contract}, nil
}

func NewDestinationVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*DestinationVerifierTransactor, error) {
	contract, err := bindDestinationVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DestinationVerifierTransactor{contract: contract}, nil
}

func NewDestinationVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*DestinationVerifierFilterer, error) {
	contract, err := bindDestinationVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DestinationVerifierFilterer{contract: contract}, nil
}

func bindDestinationVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := DestinationVerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_DestinationVerifier *DestinationVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DestinationVerifier.Contract.DestinationVerifierCaller.contract.Call(opts, result, method, params...)
}

func (_DestinationVerifier *DestinationVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.DestinationVerifierTransactor.contract.Transfer(opts)
}

func (_DestinationVerifier *DestinationVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.DestinationVerifierTransactor.contract.Transact(opts, method, params...)
}

func (_DestinationVerifier *DestinationVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DestinationVerifier.Contract.contract.Call(opts, result, method, params...)
}

func (_DestinationVerifier *DestinationVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.contract.Transfer(opts)
}

func (_DestinationVerifier *DestinationVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.contract.Transact(opts, method, params...)
}

func (_DestinationVerifier *DestinationVerifierCaller) GetAccessController(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DestinationVerifier.contract.Call(opts, &out, "getAccessController")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_DestinationVerifier *DestinationVerifierSession) GetAccessController() (common.Address, error) {
	return _DestinationVerifier.Contract.GetAccessController(&_DestinationVerifier.CallOpts)
}

func (_DestinationVerifier *DestinationVerifierCallerSession) GetAccessController() (common.Address, error) {
	return _DestinationVerifier.Contract.GetAccessController(&_DestinationVerifier.CallOpts)
}

func (_DestinationVerifier *DestinationVerifierCaller) GetFeeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DestinationVerifier.contract.Call(opts, &out, "getFeeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_DestinationVerifier *DestinationVerifierSession) GetFeeManager() (common.Address, error) {
	return _DestinationVerifier.Contract.GetFeeManager(&_DestinationVerifier.CallOpts)
}

func (_DestinationVerifier *DestinationVerifierCallerSession) GetFeeManager() (common.Address, error) {
	return _DestinationVerifier.Contract.GetFeeManager(&_DestinationVerifier.CallOpts)
}

func (_DestinationVerifier *DestinationVerifierCaller) IVerifierProxy(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DestinationVerifier.contract.Call(opts, &out, "i_verifierProxy")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_DestinationVerifier *DestinationVerifierSession) IVerifierProxy() (common.Address, error) {
	return _DestinationVerifier.Contract.IVerifierProxy(&_DestinationVerifier.CallOpts)
}

func (_DestinationVerifier *DestinationVerifierCallerSession) IVerifierProxy() (common.Address, error) {
	return _DestinationVerifier.Contract.IVerifierProxy(&_DestinationVerifier.CallOpts)
}

func (_DestinationVerifier *DestinationVerifierCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DestinationVerifier.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_DestinationVerifier *DestinationVerifierSession) Owner() (common.Address, error) {
	return _DestinationVerifier.Contract.Owner(&_DestinationVerifier.CallOpts)
}

func (_DestinationVerifier *DestinationVerifierCallerSession) Owner() (common.Address, error) {
	return _DestinationVerifier.Contract.Owner(&_DestinationVerifier.CallOpts)
}

func (_DestinationVerifier *DestinationVerifierCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _DestinationVerifier.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_DestinationVerifier *DestinationVerifierSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DestinationVerifier.Contract.SupportsInterface(&_DestinationVerifier.CallOpts, interfaceId)
}

func (_DestinationVerifier *DestinationVerifierCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DestinationVerifier.Contract.SupportsInterface(&_DestinationVerifier.CallOpts, interfaceId)
}

func (_DestinationVerifier *DestinationVerifierCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DestinationVerifier.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_DestinationVerifier *DestinationVerifierSession) TypeAndVersion() (string, error) {
	return _DestinationVerifier.Contract.TypeAndVersion(&_DestinationVerifier.CallOpts)
}

func (_DestinationVerifier *DestinationVerifierCallerSession) TypeAndVersion() (string, error) {
	return _DestinationVerifier.Contract.TypeAndVersion(&_DestinationVerifier.CallOpts)
}

func (_DestinationVerifier *DestinationVerifierTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DestinationVerifier.contract.Transact(opts, "acceptOwnership")
}

func (_DestinationVerifier *DestinationVerifierSession) AcceptOwnership() (*types.Transaction, error) {
	return _DestinationVerifier.Contract.AcceptOwnership(&_DestinationVerifier.TransactOpts)
}

func (_DestinationVerifier *DestinationVerifierTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _DestinationVerifier.Contract.AcceptOwnership(&_DestinationVerifier.TransactOpts)
}

func (_DestinationVerifier *DestinationVerifierTransactor) SetAccessController(opts *bind.TransactOpts, accessController common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.contract.Transact(opts, "setAccessController", accessController)
}

func (_DestinationVerifier *DestinationVerifierSession) SetAccessController(accessController common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.SetAccessController(&_DestinationVerifier.TransactOpts, accessController)
}

func (_DestinationVerifier *DestinationVerifierTransactorSession) SetAccessController(accessController common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.SetAccessController(&_DestinationVerifier.TransactOpts, accessController)
}

func (_DestinationVerifier *DestinationVerifierTransactor) SetConfig(opts *bind.TransactOpts, signers []common.Address, f uint8, recipientAddressesAndWeights []CommonAddressAndWeight) (*types.Transaction, error) {
	return _DestinationVerifier.contract.Transact(opts, "setConfig", signers, f, recipientAddressesAndWeights)
}

func (_DestinationVerifier *DestinationVerifierSession) SetConfig(signers []common.Address, f uint8, recipientAddressesAndWeights []CommonAddressAndWeight) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.SetConfig(&_DestinationVerifier.TransactOpts, signers, f, recipientAddressesAndWeights)
}

func (_DestinationVerifier *DestinationVerifierTransactorSession) SetConfig(signers []common.Address, f uint8, recipientAddressesAndWeights []CommonAddressAndWeight) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.SetConfig(&_DestinationVerifier.TransactOpts, signers, f, recipientAddressesAndWeights)
}

func (_DestinationVerifier *DestinationVerifierTransactor) SetConfigActive(opts *bind.TransactOpts, DONConfigIndex *big.Int, isActive bool) (*types.Transaction, error) {
	return _DestinationVerifier.contract.Transact(opts, "setConfigActive", DONConfigIndex, isActive)
}

func (_DestinationVerifier *DestinationVerifierSession) SetConfigActive(DONConfigIndex *big.Int, isActive bool) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.SetConfigActive(&_DestinationVerifier.TransactOpts, DONConfigIndex, isActive)
}

func (_DestinationVerifier *DestinationVerifierTransactorSession) SetConfigActive(DONConfigIndex *big.Int, isActive bool) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.SetConfigActive(&_DestinationVerifier.TransactOpts, DONConfigIndex, isActive)
}

func (_DestinationVerifier *DestinationVerifierTransactor) SetFeeManager(opts *bind.TransactOpts, feeManager common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.contract.Transact(opts, "setFeeManager", feeManager)
}

func (_DestinationVerifier *DestinationVerifierSession) SetFeeManager(feeManager common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.SetFeeManager(&_DestinationVerifier.TransactOpts, feeManager)
}

func (_DestinationVerifier *DestinationVerifierTransactorSession) SetFeeManager(feeManager common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.SetFeeManager(&_DestinationVerifier.TransactOpts, feeManager)
}

func (_DestinationVerifier *DestinationVerifierTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.contract.Transact(opts, "transferOwnership", to)
}

func (_DestinationVerifier *DestinationVerifierSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.TransferOwnership(&_DestinationVerifier.TransactOpts, to)
}

func (_DestinationVerifier *DestinationVerifierTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.TransferOwnership(&_DestinationVerifier.TransactOpts, to)
}

func (_DestinationVerifier *DestinationVerifierTransactor) Verify(opts *bind.TransactOpts, signedReport []byte, parameterPayload []byte, sender common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.contract.Transact(opts, "verify", signedReport, parameterPayload, sender)
}

func (_DestinationVerifier *DestinationVerifierSession) Verify(signedReport []byte, parameterPayload []byte, sender common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.Verify(&_DestinationVerifier.TransactOpts, signedReport, parameterPayload, sender)
}

func (_DestinationVerifier *DestinationVerifierTransactorSession) Verify(signedReport []byte, parameterPayload []byte, sender common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.Verify(&_DestinationVerifier.TransactOpts, signedReport, parameterPayload, sender)
}

func (_DestinationVerifier *DestinationVerifierTransactor) VerifyBulk(opts *bind.TransactOpts, signedReports [][]byte, parameterPayload []byte, sender common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.contract.Transact(opts, "verifyBulk", signedReports, parameterPayload, sender)
}

func (_DestinationVerifier *DestinationVerifierSession) VerifyBulk(signedReports [][]byte, parameterPayload []byte, sender common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.VerifyBulk(&_DestinationVerifier.TransactOpts, signedReports, parameterPayload, sender)
}

func (_DestinationVerifier *DestinationVerifierTransactorSession) VerifyBulk(signedReports [][]byte, parameterPayload []byte, sender common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.VerifyBulk(&_DestinationVerifier.TransactOpts, signedReports, parameterPayload, sender)
}

type DestinationVerifierAccessControllerSetIterator struct {
	Event *DestinationVerifierAccessControllerSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *DestinationVerifierAccessControllerSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DestinationVerifierAccessControllerSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(DestinationVerifierAccessControllerSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *DestinationVerifierAccessControllerSetIterator) Error() error {
	return it.fail
}

func (it *DestinationVerifierAccessControllerSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type DestinationVerifierAccessControllerSet struct {
	OldAccessController common.Address
	NewAccessController common.Address
	Raw                 types.Log
}

func (_DestinationVerifier *DestinationVerifierFilterer) FilterAccessControllerSet(opts *bind.FilterOpts) (*DestinationVerifierAccessControllerSetIterator, error) {

	logs, sub, err := _DestinationVerifier.contract.FilterLogs(opts, "AccessControllerSet")
	if err != nil {
		return nil, err
	}
	return &DestinationVerifierAccessControllerSetIterator{contract: _DestinationVerifier.contract, event: "AccessControllerSet", logs: logs, sub: sub}, nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) WatchAccessControllerSet(opts *bind.WatchOpts, sink chan<- *DestinationVerifierAccessControllerSet) (event.Subscription, error) {

	logs, sub, err := _DestinationVerifier.contract.WatchLogs(opts, "AccessControllerSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(DestinationVerifierAccessControllerSet)
				if err := _DestinationVerifier.contract.UnpackLog(event, "AccessControllerSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) ParseAccessControllerSet(log types.Log) (*DestinationVerifierAccessControllerSet, error) {
	event := new(DestinationVerifierAccessControllerSet)
	if err := _DestinationVerifier.contract.UnpackLog(event, "AccessControllerSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type DestinationVerifierConfigActivatedIterator struct {
	Event *DestinationVerifierConfigActivated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *DestinationVerifierConfigActivatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DestinationVerifierConfigActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(DestinationVerifierConfigActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *DestinationVerifierConfigActivatedIterator) Error() error {
	return it.fail
}

func (it *DestinationVerifierConfigActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type DestinationVerifierConfigActivated struct {
	DONConfigID [24]byte
	IsActive    bool
	Raw         types.Log
}

func (_DestinationVerifier *DestinationVerifierFilterer) FilterConfigActivated(opts *bind.FilterOpts) (*DestinationVerifierConfigActivatedIterator, error) {

	logs, sub, err := _DestinationVerifier.contract.FilterLogs(opts, "ConfigActivated")
	if err != nil {
		return nil, err
	}
	return &DestinationVerifierConfigActivatedIterator{contract: _DestinationVerifier.contract, event: "ConfigActivated", logs: logs, sub: sub}, nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) WatchConfigActivated(opts *bind.WatchOpts, sink chan<- *DestinationVerifierConfigActivated) (event.Subscription, error) {

	logs, sub, err := _DestinationVerifier.contract.WatchLogs(opts, "ConfigActivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(DestinationVerifierConfigActivated)
				if err := _DestinationVerifier.contract.UnpackLog(event, "ConfigActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) ParseConfigActivated(log types.Log) (*DestinationVerifierConfigActivated, error) {
	event := new(DestinationVerifierConfigActivated)
	if err := _DestinationVerifier.contract.UnpackLog(event, "ConfigActivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type DestinationVerifierConfigSetIterator struct {
	Event *DestinationVerifierConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *DestinationVerifierConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DestinationVerifierConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(DestinationVerifierConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *DestinationVerifierConfigSetIterator) Error() error {
	return it.fail
}

func (it *DestinationVerifierConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type DestinationVerifierConfigSet struct {
	DONConfigID                  [24]byte
	Signers                      []common.Address
	F                            uint8
	RecipientAddressesAndWeights []CommonAddressAndWeight
	Raw                          types.Log
}

func (_DestinationVerifier *DestinationVerifierFilterer) FilterConfigSet(opts *bind.FilterOpts, DONConfigID [][24]byte) (*DestinationVerifierConfigSetIterator, error) {

	var DONConfigIDRule []interface{}
	for _, DONConfigIDItem := range DONConfigID {
		DONConfigIDRule = append(DONConfigIDRule, DONConfigIDItem)
	}

	logs, sub, err := _DestinationVerifier.contract.FilterLogs(opts, "ConfigSet", DONConfigIDRule)
	if err != nil {
		return nil, err
	}
	return &DestinationVerifierConfigSetIterator{contract: _DestinationVerifier.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *DestinationVerifierConfigSet, DONConfigID [][24]byte) (event.Subscription, error) {

	var DONConfigIDRule []interface{}
	for _, DONConfigIDItem := range DONConfigID {
		DONConfigIDRule = append(DONConfigIDRule, DONConfigIDItem)
	}

	logs, sub, err := _DestinationVerifier.contract.WatchLogs(opts, "ConfigSet", DONConfigIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(DestinationVerifierConfigSet)
				if err := _DestinationVerifier.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) ParseConfigSet(log types.Log) (*DestinationVerifierConfigSet, error) {
	event := new(DestinationVerifierConfigSet)
	if err := _DestinationVerifier.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type DestinationVerifierFeeManagerSetIterator struct {
	Event *DestinationVerifierFeeManagerSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *DestinationVerifierFeeManagerSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DestinationVerifierFeeManagerSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(DestinationVerifierFeeManagerSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *DestinationVerifierFeeManagerSetIterator) Error() error {
	return it.fail
}

func (it *DestinationVerifierFeeManagerSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type DestinationVerifierFeeManagerSet struct {
	OldFeeManager common.Address
	NewFeeManager common.Address
	Raw           types.Log
}

func (_DestinationVerifier *DestinationVerifierFilterer) FilterFeeManagerSet(opts *bind.FilterOpts) (*DestinationVerifierFeeManagerSetIterator, error) {

	logs, sub, err := _DestinationVerifier.contract.FilterLogs(opts, "FeeManagerSet")
	if err != nil {
		return nil, err
	}
	return &DestinationVerifierFeeManagerSetIterator{contract: _DestinationVerifier.contract, event: "FeeManagerSet", logs: logs, sub: sub}, nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) WatchFeeManagerSet(opts *bind.WatchOpts, sink chan<- *DestinationVerifierFeeManagerSet) (event.Subscription, error) {

	logs, sub, err := _DestinationVerifier.contract.WatchLogs(opts, "FeeManagerSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(DestinationVerifierFeeManagerSet)
				if err := _DestinationVerifier.contract.UnpackLog(event, "FeeManagerSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) ParseFeeManagerSet(log types.Log) (*DestinationVerifierFeeManagerSet, error) {
	event := new(DestinationVerifierFeeManagerSet)
	if err := _DestinationVerifier.contract.UnpackLog(event, "FeeManagerSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type DestinationVerifierOwnershipTransferRequestedIterator struct {
	Event *DestinationVerifierOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *DestinationVerifierOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DestinationVerifierOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(DestinationVerifierOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *DestinationVerifierOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *DestinationVerifierOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type DestinationVerifierOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_DestinationVerifier *DestinationVerifierFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*DestinationVerifierOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DestinationVerifier.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &DestinationVerifierOwnershipTransferRequestedIterator{contract: _DestinationVerifier.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *DestinationVerifierOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DestinationVerifier.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(DestinationVerifierOwnershipTransferRequested)
				if err := _DestinationVerifier.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) ParseOwnershipTransferRequested(log types.Log) (*DestinationVerifierOwnershipTransferRequested, error) {
	event := new(DestinationVerifierOwnershipTransferRequested)
	if err := _DestinationVerifier.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type DestinationVerifierOwnershipTransferredIterator struct {
	Event *DestinationVerifierOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *DestinationVerifierOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DestinationVerifierOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(DestinationVerifierOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *DestinationVerifierOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *DestinationVerifierOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type DestinationVerifierOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_DestinationVerifier *DestinationVerifierFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*DestinationVerifierOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DestinationVerifier.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &DestinationVerifierOwnershipTransferredIterator{contract: _DestinationVerifier.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *DestinationVerifierOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DestinationVerifier.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(DestinationVerifierOwnershipTransferred)
				if err := _DestinationVerifier.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) ParseOwnershipTransferred(log types.Log) (*DestinationVerifierOwnershipTransferred, error) {
	event := new(DestinationVerifierOwnershipTransferred)
	if err := _DestinationVerifier.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type DestinationVerifierReportVerifiedIterator struct {
	Event *DestinationVerifierReportVerified

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *DestinationVerifierReportVerifiedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DestinationVerifierReportVerified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(DestinationVerifierReportVerified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *DestinationVerifierReportVerifiedIterator) Error() error {
	return it.fail
}

func (it *DestinationVerifierReportVerifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type DestinationVerifierReportVerified struct {
	FeedId    [32]byte
	Requester common.Address
	Raw       types.Log
}

func (_DestinationVerifier *DestinationVerifierFilterer) FilterReportVerified(opts *bind.FilterOpts, feedId [][32]byte) (*DestinationVerifierReportVerifiedIterator, error) {

	var feedIdRule []interface{}
	for _, feedIdItem := range feedId {
		feedIdRule = append(feedIdRule, feedIdItem)
	}

	logs, sub, err := _DestinationVerifier.contract.FilterLogs(opts, "ReportVerified", feedIdRule)
	if err != nil {
		return nil, err
	}
	return &DestinationVerifierReportVerifiedIterator{contract: _DestinationVerifier.contract, event: "ReportVerified", logs: logs, sub: sub}, nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) WatchReportVerified(opts *bind.WatchOpts, sink chan<- *DestinationVerifierReportVerified, feedId [][32]byte) (event.Subscription, error) {

	var feedIdRule []interface{}
	for _, feedIdItem := range feedId {
		feedIdRule = append(feedIdRule, feedIdItem)
	}

	logs, sub, err := _DestinationVerifier.contract.WatchLogs(opts, "ReportVerified", feedIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(DestinationVerifierReportVerified)
				if err := _DestinationVerifier.contract.UnpackLog(event, "ReportVerified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) ParseReportVerified(log types.Log) (*DestinationVerifierReportVerified, error) {
	event := new(DestinationVerifierReportVerified)
	if err := _DestinationVerifier.contract.UnpackLog(event, "ReportVerified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_DestinationVerifier *DestinationVerifier) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _DestinationVerifier.abi.Events["AccessControllerSet"].ID:
		return _DestinationVerifier.ParseAccessControllerSet(log)
	case _DestinationVerifier.abi.Events["ConfigActivated"].ID:
		return _DestinationVerifier.ParseConfigActivated(log)
	case _DestinationVerifier.abi.Events["ConfigSet"].ID:
		return _DestinationVerifier.ParseConfigSet(log)
	case _DestinationVerifier.abi.Events["FeeManagerSet"].ID:
		return _DestinationVerifier.ParseFeeManagerSet(log)
	case _DestinationVerifier.abi.Events["OwnershipTransferRequested"].ID:
		return _DestinationVerifier.ParseOwnershipTransferRequested(log)
	case _DestinationVerifier.abi.Events["OwnershipTransferred"].ID:
		return _DestinationVerifier.ParseOwnershipTransferred(log)
	case _DestinationVerifier.abi.Events["ReportVerified"].ID:
		return _DestinationVerifier.ParseReportVerified(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (DestinationVerifierAccessControllerSet) Topic() common.Hash {
	return common.HexToHash("0x953e92b1a6442e9c3242531154a3f6f6eb00b4e9c719ba8118fa6235e4ce89b6")
}

func (DestinationVerifierConfigActivated) Topic() common.Hash {
	return common.HexToHash("0x90186a1e77b498ec417ea88bd026cae00d7043c357cc45221777623bda582dd4")
}

func (DestinationVerifierConfigSet) Topic() common.Hash {
	return common.HexToHash("0x2d763a674a99583454a287d792819ffb9ff7e791c23e7745a082701136ce336c")
}

func (DestinationVerifierFeeManagerSet) Topic() common.Hash {
	return common.HexToHash("0x04628abcaa6b1674651352125cb94b65b289145bc2bc4d67720bb7d966372f03")
}

func (DestinationVerifierOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (DestinationVerifierOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (DestinationVerifierReportVerified) Topic() common.Hash {
	return common.HexToHash("0x58ca9502e98a536e06e72d680fcc251e5d10b72291a281665a2c2dc0ac30fcc5")
}

func (_DestinationVerifier *DestinationVerifier) Address() common.Address {
	return _DestinationVerifier.address
}

type DestinationVerifierInterface interface {
	GetAccessController(opts *bind.CallOpts) (common.Address, error)

	GetFeeManager(opts *bind.CallOpts) (common.Address, error)

	IVerifierProxy(opts *bind.CallOpts) (common.Address, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	SetAccessController(opts *bind.TransactOpts, accessController common.Address) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, signers []common.Address, f uint8, recipientAddressesAndWeights []CommonAddressAndWeight) (*types.Transaction, error)

	SetConfigActive(opts *bind.TransactOpts, DONConfigIndex *big.Int, isActive bool) (*types.Transaction, error)

	SetFeeManager(opts *bind.TransactOpts, feeManager common.Address) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Verify(opts *bind.TransactOpts, signedReport []byte, parameterPayload []byte, sender common.Address) (*types.Transaction, error)

	VerifyBulk(opts *bind.TransactOpts, signedReports [][]byte, parameterPayload []byte, sender common.Address) (*types.Transaction, error)

	FilterAccessControllerSet(opts *bind.FilterOpts) (*DestinationVerifierAccessControllerSetIterator, error)

	WatchAccessControllerSet(opts *bind.WatchOpts, sink chan<- *DestinationVerifierAccessControllerSet) (event.Subscription, error)

	ParseAccessControllerSet(log types.Log) (*DestinationVerifierAccessControllerSet, error)

	FilterConfigActivated(opts *bind.FilterOpts) (*DestinationVerifierConfigActivatedIterator, error)

	WatchConfigActivated(opts *bind.WatchOpts, sink chan<- *DestinationVerifierConfigActivated) (event.Subscription, error)

	ParseConfigActivated(log types.Log) (*DestinationVerifierConfigActivated, error)

	FilterConfigSet(opts *bind.FilterOpts, DONConfigID [][24]byte) (*DestinationVerifierConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *DestinationVerifierConfigSet, DONConfigID [][24]byte) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*DestinationVerifierConfigSet, error)

	FilterFeeManagerSet(opts *bind.FilterOpts) (*DestinationVerifierFeeManagerSetIterator, error)

	WatchFeeManagerSet(opts *bind.WatchOpts, sink chan<- *DestinationVerifierFeeManagerSet) (event.Subscription, error)

	ParseFeeManagerSet(log types.Log) (*DestinationVerifierFeeManagerSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*DestinationVerifierOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *DestinationVerifierOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*DestinationVerifierOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*DestinationVerifierOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *DestinationVerifierOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*DestinationVerifierOwnershipTransferred, error)

	FilterReportVerified(opts *bind.FilterOpts, feedId [][32]byte) (*DestinationVerifierReportVerifiedIterator, error)

	WatchReportVerified(opts *bind.WatchOpts, sink chan<- *DestinationVerifierReportVerified, feedId [][32]byte) (event.Subscription, error)

	ParseReportVerified(log types.Log) (*DestinationVerifierReportVerified, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
