name: Solidity-Hardhat
on:
  push:
#  workflow_dispatch:
#    inputs:
#      pr_urls:
#        description: 'Comma-separated links to PRs to generate artifacts for'
#        required: true

env:
  FOUNDRY_PROFILE: ci
  # Has to match the `make foundry` version.
  FOUNDRY_VERSION: nightly-de33b6af53005037b463318d2628b5cfcaf39916
  TEST_PRS_LIST: "https://github.com/smartcontractkit/chainlink/pull/13625/checks,https://github.com/smartcontractkit/chainlink/pull/13487"

jobs:
  # we want to find the newest sha for the PRs we are testing and then generate gas snapshots and coverage for them
  find-newest-sha:
    name: Find newest SHA
    runs-on: ubuntu-22.04
    outputs:
        newest_sha: ${{ steps.get-newest-sha.outputs.newest_sha }}
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Get the newest SHA
        shell: bash
        id: get-newest-sha
        run: |
          cd contracts/scripts
          newest_sha=$(./newest_sha.sh ${{ github.repository }} ${{ env.TEST_PRS_LIST }})
          echo "Newest SHA: $newest_sha"
          echo "newest_sha=$newest_sha" >> $GITHUB_OUTPUT

  # some of the artifacts can only be generated on product level, and we cannot scope them to single contracts
  coverage-and-gas-and-book:
    strategy:
      fail-fast: false
      matrix:
        product: [automation, functions, keystone, l2ep, llo-feeds, operatorforwarder, shared, vrf]
    name: Foundry Tests ${{ matrix.product }}
    runs-on: ubuntu-22.04
    needs: [find-newest-sha]
    steps:
      - name: Checkout the repo
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          submodules: recursive
          sha: ${{ needs.find-newest-sha.outputs.newest_sha }}

      - name: Setup NodeJS
        uses: ./.github/actions/setup-nodejs

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@8f1998e9878d786675189ef566a2e4bf24869773 # v1.2.0
        with:
          # Has to match the `make foundry` version.
          version: nightly-de33b6af53005037b463318d2628b5cfcaf39916

      - name: Run Forge build
        run: |
          forge --version
          forge build
        id: build
        working-directory: contracts
        env:
          FOUNDRY_PROFILE: ${{ matrix.product }}

      - name: Run Forge snapshot
        if: ${{ !contains(fromJson('["vrf"]'), matrix.product) && !contains(fromJson('["automation"]'), matrix.product) && !contains(fromJson('["keystone"]'), matrix.product) && needs.changes.outputs.changes == 'true' }}
        run: |
          forge snapshot --nmt "testFuzz_\w{1,}?" --check gas-snapshots/${{ matrix.product }}.gas-snapshot
        id: snapshot
        working-directory: contracts
        env:
          FOUNDRY_PROFILE: ${{ matrix.product }}

      - name: Run coverage
        if: ${{ !contains(fromJson('["vrf"]'), matrix.product.name) && !contains(fromJson('["automation"]'), matrix.product.name) && !contains(fromJson('["functions"]'), matrix.product.name) && needs.changes.outputs.changes == 'true' }}
        working-directory: contracts
        run: forge coverage --report lcov
        env:
          FOUNDRY_PROFILE: ${{ matrix.product }}

      # see what we should prune for other products
      #      - name: Prune report
      #        if: ${{ needs.changes.outputs.changes == 'true' }}
      #        run: |
      #          sudo apt-get install lcov
      #          ./tools/ci/ccip_lcov_prune ./contracts/lcov.info ./lcov.info.pruned
      #        env:
      #          FOUNDRY_PROFILE: ${{ matrix.product }}

      # We could gather coverage for all products

      - name: Report code coverage
        if: ${{ !contains(fromJson('["vrf"]'), matrix.product.name) && !contains(fromJson('["automation"]'), matrix.product.name) && !contains(fromJson('["functions"]'), matrix.product.name) && needs.changes.outputs.changes == 'true' }}
        uses: zgosalvez/github-actions-report-lcov@a546f89a65a0cdcd82a92ae8d65e74d450ff3fbc # v4.1.4
        with:
          update-comment: true
          coverage-files: ./contracts/lcov.info
          minimum-coverage: ${{ matrix.product.min-coverage }}
          artifact-name: code-coverage-report-${{ matrix.product.name }}
          working-directory: ./contracts
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Forge doc
        run: |
          forge doc --build
        id: doc
        working-directory: contracts
        env:
          FOUNDRY_PROFILE: ${{ matrix.product }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        timeout-minutes: 2
        continue-on-error: true
        with:
          name: ${{ matrix.product }}-artifacts
          path: |
            contracts/gas-snapshots/${{ matrix.product }}.gas-snapshot
            contracts/docs/${{ matrix.product }}
            contracts/${{ matrix.product }}-lcov.info
          retention-days: 7

  # Generates UML diagrams and Slither reports for modified contracts
  uml-static-analysis:
    name: Generate UML and Slither reports for modified contracts
    runs-on: ubuntu-22.04
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup NodeJS
        uses: ./.github/actions/setup-nodejs

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@8f1998e9878d786675189ef566a2e4bf24869773 # v1.2.0
        with:
          version: ${{ env.FOUNDRY_VERSION }}

#      - name: Install Sol2uml
#        run: |
#          npm link sol2uml --only=production

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install solc-select and solc
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install solc-select
          sudo ln -s /usr/local/bin/solc-select /usr/bin/solc-select

      - name: Install Slither
        run: |
          python -m pip install --upgrade pip
          pip install slither-analyzer

      - name: Run custom bash command
        run: |
          slither .         
          exit 1

      - name: Gather Solidity files from PRs
        run: |
          # extract src dir from foundry.toml
          cd contracts
          SRC_FOLDER=$(echo "$(forge config | grep -Eo 'src\s*=\s*[^ ]+' | awk -F '=' '{print $2}' | tr -d '\"' | tr -d '[:space:]')")
          echo "SRC_FOLDER: $SRC_FOLDER"
          cd ..
          ./contracts/scripts/gather_all_solidity_files_from_prs.sh "${{ github.repository }}" "${{ env.TEST_PRS_LIST }}" "$SRC_FOLDER" "contracts/from_prs"

      - name: Generate UML
        shell: bash
        run: |
          cd contracts
          base_dir="from_prs"

          for pr_dir in "$base_dir"/*/; do
            pr_number=$(basename "$pr_dir")
            pr_file="$base_dir/$pr_number.txt"
          
            echo "Processing PR $pr_number | $pr_file"
          
            if [[ -f "$pr_file" ]]; then
              comma_separated_list=$(tr '\n' ',' < "$pr_file" | sed 's/,$//')
            
              echo "Selected files: $comma_separated_list"
            
              ./scripts/selected_uml.sh "$base_dir/$pr_number" "uml" "$comma_separated_list"
            else
              echo "File $pr_file does not exist"
            fi
          done

      - name: Generate Slither Markdown reports
        run: |
          cd contracts
          base_dir="from_prs"

          for pr_dir in "$base_dir"/*/; do
            pr_number=$(basename "$pr_dir")
            pr_file="$base_dir/$pr_number.txt"
          
            echo "Processing PR $pr_number | $pr_file"
          
            if [[ -f "$pr_file" ]]; then
              comma_separated_list=$(tr '\n' ',' < "$pr_file" | sed 's/,$//')
          
              echo "Selected files: $comma_separated_list"
          
              ./scripts/generate_slither_report.sh "${{ github.server_url }}/${{ github.repository }}/blob/${{ github.sha }}/" .slither.config-artifacts.json "$base_dir/$pr_number" "$comma_separated_list" "slither-reports"
            else
              echo "File $pr_file does not exist"
            fi
          done          

      - name: Upload UMLs and Slither reports
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        timeout-minutes: 10
        continue-on-error: true
        with:
          name: contracts-artifacts
          path: |
            contracts/uml
            contracts/slither-reports
          retention-days: 7

  gather-all-artifacts:
    name: Gather all artifacts
    runs-on: ubuntu-latest
    needs: [coverage-and-gas-and-book, uml-static-analysis]
    steps:
      - name: Download UMLs and Slither Reports artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: contracts-artifacts
          path: review_artifacts/
      - name: Download automation artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: automation-artifacts
          path: review_artifacts/
      - name: Download functions artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: functions-artifacts
          path: review_artifacts/
      - name: Download keystone artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: keystone-artifacts
          path: review_artifacts/
      - name: Download l2ep artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: l2ep-artifacts
          path: review_artifacts/
      - name: Download llo-feeds artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: llo-feeds-artifacts
          path: review_artifacts/
      - name: Download operatorforwarder artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: operatorforwarder-artifacts
          path: review_artifacts/
      - name: Download shared artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: shared-artifacts
          path: review_artifacts/
      - name: Download vrf artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: vrf-artifacts
          path: review_artifacts/

      - name: Upload all artifacts as single package
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: review-artifacts
          path: review_artifacts/

      - name: Remove UML artifact
        uses: geekyeggo/delete-artifact@24928e75e6e6590170563b8ddae9fac674508aa1 # v5.0
        with:
          name: uml-diagrams
      - name: Remove automation artifacts
        uses: geekyeggo/delete-artifact@24928e75e6e6590170563b8ddae9fac674508aa1 # v5.0
        with:
          name: automation-artifacts
      - name: Remove functions artifacts
        uses: geekyeggo/delete-artifact@24928e75e6e6590170563b8ddae9fac674508aa1 # v5.0
        with:
          name: functions-artifacts
      - name: Remove keystone artifacts
        uses: geekyeggo/delete-artifact@24928e75e6e6590170563b8ddae9fac674508aa1 # v5.0
        with:
          name: keystone-artifacts
      - name: Remove l2ep artifacts
        uses: geekyeggo/delete-artifact@24928e75e6e6590170563b8ddae9fac674508aa1 # v5.0
        with:
          name: l2ep-artifacts
      - name: Remove llo-feeds artifacts
        uses: geekyeggo/delete-artifact@24928e75e6e6590170563b8ddae9fac674508aa1 # v5.0
        with:
          name: llo-feeds-artifacts
      - name: Remove operatorforwarder artifacts
        uses: geekyeggo/delete-artifact@24928e75e6e6590170563b8ddae9fac674508aa1 # v5.0
        with:
          name: operatorforwarder-artifacts
      - name: Remove shared artifacts
        uses: geekyeggo/delete-artifact@24928e75e6e6590170563b8ddae9fac674508aa1 # v5.0
        with:
          name: shared-artifacts
      - name: Remove vrf artifacts
        uses: geekyeggo/delete-artifact@24928e75e6e6590170563b8ddae9fac674508aa1 # v5.0
        with:
          name: vrf-artifacts

#on:
#  merge_group:
#  push:
#
#env:
#  NODE_OPTIONS: --max_old_space_size=8192
#
#defaults:
#  run:
#    shell: bash
#
#jobs:
#  changes:
#    name: Detect changes
#    runs-on: ubuntu-latest
#    outputs:
#      changes: ${{ steps.changes.outputs.src }}
#    steps:
#      - name: Checkout the repo
#        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
#      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
#        id: changes
#        with:
#          filters: |
#            src:
#              - 'contracts/src/!(v0.8/(ccip|functions|keystone|l2ep|llo-feeds|transmission|vrf)/**)/**/*'
#              - 'contracts/test/**/*'
#              - 'contracts/package.json'
#              - 'contracts/pnpm-lock.yaml'
#              - 'contracts/hardhat.config.ts'
#              - '.github/workflows/solidity-hardhat.yml'
#
#  hardhat-test:
#    needs: [changes]
#    if: needs.changes.outputs.changes == 'true'
#    name: Solidity ${{ fromJSON('["(skipped)", ""]')[needs.changes.outputs.changes == 'true'] }}
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the repo
#        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
#      - name: Setup NodeJS
#        uses: ./.github/actions/setup-nodejs
#      - name: Setup Hardhat
#        uses: ./.github/actions/setup-hardhat
#        with:
#          namespace: coverage
#      - name: Run tests
#        working-directory: contracts
#        run: pnpm test
#      - name: Collect Metrics
#        id: collect-gha-metrics
#        uses: smartcontractkit/push-gha-metrics-action@d9da21a2747016b3e13de58c7d4115a3d5c97935 # v3.0.1
#        with:
#          id: hardhat-test
#          org-id: ${{ secrets.GRAFANA_INTERNAL_TENANT_ID }}
#          basic-auth: ${{ secrets.GRAFANA_INTERNAL_BASIC_AUTH }}
#          hostname: ${{ secrets.GRAFANA_INTERNAL_HOST }}
#        continue-on-error: true
#
#  solidity:
#    needs: [changes, hardhat-test]
#    name: Solidity
#    runs-on: ubuntu-latest
#    if: always()
#    steps:
#      - run: echo 'Solidity tests finished!'
#      - name: Check test results
#        run: |
#          if [[ "${{ needs.changes.result }}" = "failure" || "${{ needs.solidity-splits.result }}" = "failure" ]]; then
#            echo "One or more changes / solidity-splits jobs failed"
#            exit 1
#          else
#            echo "All test jobs passed successfully"
#          fi
#      - name: Collect Metrics
#        if: always()
#        id: collect-gha-metrics
#        uses: smartcontractkit/push-gha-metrics-action@d9da21a2747016b3e13de58c7d4115a3d5c97935 # v3.0.1
#        with:
#          id: solidity-tests
#          org-id: ${{ secrets.GRAFANA_INTERNAL_TENANT_ID }}
#          basic-auth: ${{ secrets.GRAFANA_INTERNAL_BASIC_AUTH }}
#          hostname: ${{ secrets.GRAFANA_INTERNAL_HOST }}
#          this-job-name: Solidity
#        continue-on-error: true
