name: Solidity Foundry
on: [pull_request]

env:
  FOUNDRY_PROFILE: ci
  # Has to match the `make foundry` version.
  FOUNDRY_VERSION: nightly-de33b6af53005037b463318d2628b5cfcaf39916
  # we run foundry on ubuntu-22.04, because of https://github.com/foundry-rs/foundry/issues/3827

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.changes.outputs.src }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: changes
        with:
          filters: |
            src:
              - 'contracts/src/v0.8/**/*'
              - '.github/workflows/solidity-foundry.yml'
              - 'contracts/foundry.toml'
              - 'contracts/gas-snapshots/*.gas-snapshot'

  tests:
    strategy:
      fail-fast: false
      matrix:
        product:
          # 98.5 is the aspirational code coverage once we migrate all tests to Foundry
          # product that have that minimum coverage of 98.5 in the matrix below are currently excluded from the check
          - name: automation
            min-coverage: 98.5
          - name: functions
            min-coverage: 98.5
          - name: keystone
            min-coverage: 3.9
          - name: l2ep
            min-coverage: 3.67
          - name: llo-feeds
            min-coverage: 4.7
          - name: operatorforwarder
            min-coverage: 1.88
          - name: shared
            min-coverage: 1.9
          - name: vrf
            min-coverage: 98.5
    needs: [changes]
    name: Foundry Tests ${{ matrix.product.name }}
    runs-on: ubuntu-22.04

    # The if statements for steps after checkout repo is workaround for
    # passing required check for PRs that don't have filtered changes.
    steps:
      - name: Checkout the repo
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          submodules: recursive

      # Only needed because we use the NPM versions of packages
      # and not native Foundry. This is to make sure the dependencies
      # stay in sync.
      - name: Setup NodeJS
        if: needs.changes.outputs.changes == 'true'
        uses: ./.github/actions/setup-nodejs

      - name: Install Foundry
        if: needs.changes.outputs.changes == 'true'
        uses: foundry-rs/foundry-toolchain@8f1998e9878d786675189ef566a2e4bf24869773 # v1.2.0
        with:
          version: ${{ env.FOUNDRY_VERSION }}

      - name: Run Forge build
        if: needs.changes.outputs.changes == 'true'
        run: |
          forge --version
          forge build
        id: build
        working-directory: contracts
        env:
          FOUNDRY_PROFILE: ${{ matrix.product.name }}

      - name: Run Forge tests
        if: needs.changes.outputs.changes == 'true'
        run: |
          forge test -vvv
        id: test
        working-directory: contracts
        env:
          FOUNDRY_PROFILE: ${{ matrix.product.name }}

      - name: Run Forge snapshot
        if: ${{ !contains(fromJson('["vrf"]'), matrix.product.name) && !contains(fromJson('["automation"]'), matrix.product.name) && !contains(fromJson('["keystone"]'), matrix.product.name) && needs.changes.outputs.changes == 'true' }}
        run: |
          forge snapshot --nmt "testFuzz_\w{1,}?" --check gas-snapshots/${{ matrix.product.name }}.gas-snapshot
        id: snapshot
        working-directory: contracts
        env:
          FOUNDRY_PROFILE: ${{ matrix.product.name }}

      # required for code coverage report generation
      - name: Setup LCOV
        uses: hrishikesh-kadam/setup-lcov@f5da1b26b0dcf5d893077a3c4f29cf78079c841d # v1.0.0

      - name: Run coverage
        if: ${{ !contains(fromJson('["vrf"]'), matrix.product.name) && !contains(fromJson('["automation"]'), matrix.product.name) && !contains(fromJson('["functions"]'), matrix.product.name) && needs.changes.outputs.changes == 'true' }}
        working-directory: contracts
        run: forge coverage --report lcov
        env:
          FOUNDRY_PROFILE: ${{ matrix.product.name }}

      # uncomment and adjust/create a script if we want to prune the report
      #      - name: Prune report
      #        if: ${{ needs.changes.outputs.changes == 'true' }}
      #        run: |
      #          sudo apt-get install lcov
      #          ./tools/ci/ccip_lcov_prune ./contracts/lcov.info ./lcov.info.pruned
      #        env:
      #          FOUNDRY_PROFILE: ${{ matrix.product }}

      - name: Report code coverage
        if: ${{ !contains(fromJson('["vrf"]'), matrix.product.name) && !contains(fromJson('["automation"]'), matrix.product.name) && !contains(fromJson('["functions"]'), matrix.product.name) && needs.changes.outputs.changes == 'true' }}
        uses: zgosalvez/github-actions-report-lcov@a546f89a65a0cdcd82a92ae8d65e74d450ff3fbc # v4.1.4
        with:
          update-comment: true
          coverage-files: ./contracts/lcov.info
          minimum-coverage: ${{ matrix.product.min-coverage }}
          artifact-name: code-coverage-report-${{ matrix.product.name }}
          working-directory: ./contracts
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Collect Metrics
        if: needs.changes.outputs.changes == 'true'
        id: collect-gha-metrics
        uses: smartcontractkit/push-gha-metrics-action@d9da21a2747016b3e13de58c7d4115a3d5c97935 # v3.0.1
        with:
          id: ${{ matrix.product }}-solidity-foundry
          org-id: ${{ secrets.GRAFANA_INTERNAL_TENANT_ID }}
          basic-auth: ${{ secrets.GRAFANA_INTERNAL_BASIC_AUTH }}
          hostname: ${{ secrets.GRAFANA_INTERNAL_HOST }}
          this-job-name: Foundry Tests ${{ matrix.product }}
        continue-on-error: true

  # we want to run formatting and static analysis only on modified contracts
  find-modified-contracts:
    needs: [ changes ]
    name: Find modified contracts
    runs-on: ubuntu-22.04
    outputs:
      contracts: ${{ env.CONTRACT_MATRIX }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Find modified contracts
        shell: bash
        run: |
          git fetch origin ${{ github.base_ref }}
          git diff --name-only --diff-filter=AMR origin/${{ github.base_ref }}...HEAD | \
          grep -E '\.sol$' | \
          sed 's|^contracts/||' | \
          sort -u | \
          awk -F'/' '{printf("{\"path\":\"%s\",\"product\":\"%s\"}\n", $0, $3)}' | \
          jq -s '.' > modified_contracts.json
          MATRIX=$(cat modified_contracts.json | jq -c .)
          echo "CONTRACT_MATRIX=${MATRIX}" >> $GITHUB_ENV
          echo "Found modified contracts:"
          cat modified_contracts.json | jq .

  analyze:
    needs: [ find-modified-contracts ]
    name: Run static analysis
    strategy:
      fail-fast: false
      matrix:
        contract: ${{fromJson(needs.find-modified-contracts.outputs.contracts)}}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout the repo
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          submodules: recursive

      - uses: crytic/slither-action@v0.4.0
        if: needs.changes.outputs.changes == 'true'
        with:
          target: "contracts/${{ matrix.contract.path }}"
          slither-config: contracts/.slither.config-pr.json
          fail-on: none
          node-version: 20
          slither-args: --checklist --markdown-root ${{ github.server_url }}/${{ github.repository }}/blob/${{ github.sha }}/ --json slither-report.json

      - name: Print Slither summary
        if: needs.changes.outputs.changes == 'true'
        shell: bash
        run: |
          cat slither-report.json | jq -r '.results.printers[].additional_fields.detectors[] | "# \(.elements[0].source_mapping.filename_short)\n## \(.markdown)"' > output.txt
          cat output.txt
          echo "# Static analysis results " >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  fmt:
    needs: [ find-modified-contracts ]
    name: Check formatting
    strategy:
      fail-fast: false
      matrix:
        contract: ${{fromJson(needs.find-modified-contracts.outputs.contracts)}}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout the repo
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          submodules: recursive

      - name: Setup NodeJS
        if: needs.changes.outputs.changes == 'true'
        uses: ./.github/actions/setup-nodejs

      - name: Install Foundry
        if: needs.changes.outputs.changes == 'true'
        uses: foundry-rs/foundry-toolchain@8f1998e9878d786675189ef566a2e4bf24869773 # v1.2.0
        with:
          version: ${{ env.FOUNDRY_VERSION }}

      - name: Run Forge fmt
        if: needs.changes.outputs.changes == 'true'
        run: |
          forge fmt --check ${{ matrix.contract.path }}
        id: fmt
        working-directory: contracts
        env:
          FOUNDRY_PROFILE: ${{ matrix.contract.product }}

      - name: Collect Metrics
        if: needs.changes.outputs.changes == 'true'
        id: collect-gha-metrics
        uses: smartcontractkit/push-gha-metrics-action@dea9b546553cb4ca936607c2267a09c004e4ab3f # v3.0.0
        with:
          id: ${{ matrix.contract.product }}-solidity-foundry-fmt
          org-id: ${{ secrets.GRAFANA_INTERNAL_TENANT_ID }}
          basic-auth: ${{ secrets.GRAFANA_INTERNAL_BASIC_AUTH }}
          hostname: ${{ secrets.GRAFANA_INTERNAL_HOST }}
          this-job-name: Foundry Format ${{ matrix.contracts.product }}
        continue-on-error: true
