- name: Tests
  type: parallel
  steps:
  - name: Go Unit Tests
    service: ci
    command: ./internal/ci/go_test
  - name: Solidity Contract Tests
    service: ci
    command: ./internal/ci/truffle_test
  - name: Integration Tests
    service: ci
    command: ./internal/ci/ethereum_test
  - name: Frontend Tests
    service: ci
    command: ./internal/ci/gui_test
  # These force a build of the app images, which are otherwise unused in tests
  - name: Build Docker Image
    service: app
    command: --version
  - name: Build Docker Image (SGX)
    service: app-sgx
    command: --version

- name: Deploy to Acceptance
  exclude: ^master
  type: manual
  steps:
  - name: Image w/Timestamp + Version Tag
    type: push
    service: app
    image_name: gcr.io/chainlink-209321/chainlink
    image_tag: "0.2.0-{{.Timestamp}}"
    registry: https://gcr.io
    dockercfg_service: dockercfg
  - name: Set Container Image
    service: deploy
    command: ./ci/gcp-deploy-acceptance.sh

- name: Publish Docker Images
  tag: master
  type: parallel
  steps:
  - name: Image w/Version Tag
    type: push
    service: app
    image_name: smartcontract/chainlink
    image_tag: "0.2.0"
    registry: https://index.docker.io/v1/
    encrypted_dockercfg_path: internal/ci/dockercfg.encrypted
  - name: Image w/Latest Tag
    type: push
    service: app
    image_name: smartcontract/chainlink
    image_tag: latest
    registry: https://index.docker.io/v1/
    encrypted_dockercfg_path: internal/ci/dockercfg.encrypted
  - name: SGX Image w/Version Tag
    type: push
    service: app-sgx
    image_name: smartcontract/chainlink-sgx
    image_tag: "0.2.0"
    registry: https://index.docker.io/v1/
    encrypted_dockercfg_path: internal/ci/dockercfg.encrypted
  - name: SGX Image w/Latest Tag
    type: push
    service: app-sgx
    image_name: smartcontract/chainlink-sgx
    image_tag: latest
    registry: https://index.docker.io/v1/
    encrypted_dockercfg_path: internal/ci/dockercfg.encrypted

- name: Deploy to Staging
  tag: master
  service: deploy
  command: ./ci/gcp-deploy-staging.sh
